$NetBSD: patch-CMakeLists.txt,v 1.7 2018/07/19 17:58:57 bouyer Exp $

--- CMakeLists.txt.orig	2018-02-07 12:08:26.000000000 +0100
+++ CMakeLists.txt	2018-07-19 17:20:24.093239101 +0200
@@ -91,8 +91,21 @@
 # Based on code from nohal
 IF (NOT WIN32)
   # default
-  SET (ARCH "i386")
+  IF (CMAKE_SYSTEM_PROCESSOR MATCHES "arm*")
+    IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
+      SET (ARCH "aarch64")
+    ELSE (CMAKE_SIZEOF_VOID_P MATCHES "8")
+      SET (ARCH "armhf")
+    ENDIF (CMAKE_SIZEOF_VOID_P MATCHES "8")
+  ELSE (CMAKE_SYSTEM_PROCESSOR MATCHES "arm*")
+    IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
+      SET (ARCH "x86_64")
+    ELSE (CMAKE_SIZEOF_VOID_P MATCHES "8")
+      SET (ARCH "i386")
+    ENDIF (CMAKE_SIZEOF_VOID_P MATCHES "8")
+  ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES "arm*")
   SET (LIB_INSTALL_DIR "lib")
+
   IF (EXISTS /etc/debian_version)
     SET (PACKAGE_FORMAT "DEB")
     SET (PACKAGE_DEPS "libc6, libwxgtk3.0-0, wx3.0-i18n, libglu1-mesa (>= 7.0.0), libgl1-mesa-glx (>= 7.0.0), zlib1g, bzip2, libtinyxml2.6.2, libportaudio2")
@@ -125,7 +138,6 @@
     ELSE (CMAKE_SYSTEM_PROCESSOR MATCHES "arm*")
       IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
         SET (ARCH "x86_64")
-        SET (LIB_INSTALL_DIR "lib64")
       ELSE (CMAKE_SIZEOF_VOID_P MATCHES "8")
         SET (ARCH "i386")
         SET (LIB_INSTALL_DIR "lib")
@@ -344,7 +356,7 @@
 
 # Search for opengles, short of running a program to test the speed
 # of acceleration, I simply use gles on "native linux" arm systems
-IF (ARCH MATCHES "arm*" AND (NOT QT_ANDROID) )
+IF (ARCH MATCHES "arm*" AND (NOT QT_ANDROID) AND CMAKE_SYSTEM_NAME MATCHES ".*Linux" )
   find_path(OPENGLESv1_INCLUDE_DIR GLES/gl.h )
   IF (OPENGLESv1_INCLUDE_DIR)
     MESSAGE (STATUS "Found OpenGLESv1")
@@ -868,7 +880,11 @@
 
  
 IF(NOT WIN32 AND NOT APPLE AND NOT QT_ANDROID)
-  OPTION(OCPN_FORCE_GTK3 "Force the build to use GTK3" OFF)
+  IF(CMAKE_SYSTEM_NAME MATCHES ".*NetBSD")
+    OPTION(OCPN_FORCE_GTK3 "Force the build to use GTK3" ON)
+  ELSE(CMAKE_SYSTEM_NAME MATCHES ".*NetBSD")
+    OPTION(OCPN_FORCE_GTK3 "Force the build to use GTK3" OFF)
+  ENDIF(CMAKE_SYSTEM_NAME MATCHES ".*NetBSD")
 
   IF(NOT OCPN_FORCE_GTK3)
     FIND_PACKAGE(GTK2)
@@ -1919,10 +1935,10 @@
 
 #   Certain older Cmake FindGTK2 modules ( e.g. cmake-2.8.0-2) do not yield all of the required link libraries
 #   So, add them manually.  These declarations may be redundant in some architectures, but do no harm.
-IF(UNIX)
-TARGET_LINK_LIBRARIES( ${PACKAGE_NAME} dl )
-ENDIF(UNIX)
-
+IF(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
+  TARGET_LINK_LIBRARIES( ${PACKAGE_NAME} dl )
+  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--export-dynamic")
+ENDIF(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
 
 IF( UNIX AND NOT APPLE )
     FIND_PATH( LIBELF_INCLUDE_DIR NAMES libelf.h gelf.h PATH_SUFFIXES libelf )
