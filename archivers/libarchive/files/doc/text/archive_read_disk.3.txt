ARCHIVE_READ_DISK(3)	 BSD Library Functions Manual	  ARCHIVE_READ_DISK(3)

1mNAME0m
     1marchive_read_disk_new22m, 1marchive_read_disk_set_symlink_logical22m,
     1marchive_read_disk_set_symlink_physical22m,
     1marchive_read_disk_set_symlink_hybrid22m, 1marchive_read_disk_entry_from_file22m,
     1marchive_read_disk_gname22m, 1marchive_read_disk_uname22m,
     1marchive_read_disk_set_uname_lookup22m, 1marchive_read_disk_set_gname_lookup22m,
     1marchive_read_disk_set_standard_lookup22m, 1marchive_read_close22m,
     1marchive_read_finish22m, 1marchive_read_free 22m— functions for reading objects
     from disk

1mLIBRARY0m
     Streaming Archive Library (libarchive, -larchive)

1mSYNOPSIS0m
     1m#include <archive.h>0m

     4mstruct24m 4marchive24m 4m*0m
     1marchive_read_disk_new22m(4mvoid24m);

     4mint0m
     1marchive_read_disk_set_symlink_logical22m(4mstruct24m 4marchive24m 4m*24m);

     4mint0m
     1marchive_read_disk_set_symlink_physical22m(4mstruct24m 4marchive24m 4m*24m);

     4mint0m
     1marchive_read_disk_set_symlink_hybrid22m(4mstruct24m 4marchive24m 4m*24m);

     4mconst24m 4mchar24m 4m*0m
     1marchive_read_disk_gname22m(4mstruct24m 4marchive24m 4m*24m, 4mgid_t24m);

     4mconst24m 4mchar24m 4m*0m
     1marchive_read_disk_uname22m(4mstruct24m 4marchive24m 4m*24m, 4muid_t24m);

     4mint0m
     1marchive_read_disk_set_gname_lookup22m(4mstruct24m 4marchive24m 4m*24m, 4mvoid24m 4m*24m,
	 4mconst24m 4mchar24m 4m*(*lookup)(void24m 4m*,24m 4mgid_t)24m, 4mvoid24m 4m(*cleanup)(void24m 4m*)24m);

     4mint0m
     1marchive_read_disk_set_uname_lookup22m(4mstruct24m 4marchive24m 4m*24m, 4mvoid24m 4m*24m,
	 4mconst24m 4mchar24m 4m*(*lookup)(void24m 4m*,24m 4muid_t)24m, 4mvoid24m 4m(*cleanup)(void24m 4m*)24m);

     4mint0m
     1marchive_read_disk_set_standard_lookup22m(4mstruct24m 4marchive24m 4m*24m);

     4mint0m
     1marchive_read_disk_entry_from_file22m(4mstruct24m 4marchive24m 4m*24m,
	 4mstruct24m 4marchive_entry24m 4m*24m, 4mint24m 4mfd24m, 4mconst24m 4mstruct24m 4mstat24m 4m*24m);

     4mint0m
     1marchive_read_close22m(4mstruct24m 4marchive24m 4m*24m);

     4mint0m
     1marchive_read_finish22m(4mstruct24m 4marchive24m 4m*24m);

     4mint0m
     1marchive_read_free22m(4mstruct24m 4marchive24m 4m*24m);

1mDESCRIPTION0m
     These functions provide an API for reading information about objects on
     disk.  In particular, they provide an interface for populating struct
     archive_entry objects.

     1marchive_read_disk_new22m()
	     Allocates and initializes a struct archive object suitable for
	     reading object information from disk.

     1marchive_read_disk_set_symlink_logical22m(),
	     1marchive_read_disk_set_symlink_physical22m(),
	     1marchive_read_disk_set_symlink_hybrid22m()
	     This sets the mode used for handling symbolic links.  The
	     “logical” mode follows all symbolic links.  The “physical” mode
	     does not follow any symbolic links.  The “hybrid” mode currently
	     behaves identically to the “logical” mode.

     1marchive_read_disk_gname22m(), 1marchive_read_disk_uname22m()
	     Returns a user or group name given a gid or uid value.  By
	     default, these always return a NULL string.

     1marchive_read_disk_set_gname_lookup22m(),
	     1marchive_read_disk_set_uname_lookup22m()
	     These allow you to override the functions used for user and group
	     name lookups.  You may also provide a void * pointer to a private
	     data structure and a cleanup function for that data.  The cleanup
	     function will be invoked when the struct archive object is
	     destroyed or when new lookup functions are registered.

     1marchive_read_disk_set_standard_lookup22m()
	     This convenience function installs a standard set of user and
	     group name lookup functions.  These functions use getpwuid(3) and
	     getgrgid(3) to convert ids to names, defaulting to NULL if the
	     names cannot be looked up.  These functions also implement a sim‐
	     ple memory cache to reduce the number of calls to getpwuid(3) and
	     getgrgid(3).

     1marchive_read_disk_entry_from_file22m()
	     Populates a struct archive_entry object with information about a
	     particular file.  The archive_entry object must have already been
	     created with archive_entry_new(3) and at least one of the source
	     path or path fields must already be set.  (If both are set, the
	     source path will be used.)

	     Information is read from disk using the path name from the struct
	     archive_entry object.  If a file descriptor is provided, some
	     information will be obtained using that file descriptor, on plat‐
	     forms that support the appropriate system calls.

	     If a pointer to a struct stat is provided, information from that
	     structure will be used instead of reading from the disk where
	     appropriate.  This can provide performance benefits in scenarios
	     where struct stat information has already been read from the disk
	     as a side effect of some other operation.	(For example, direc‐
	     tory traversal libraries often provide this information.)

	     Where necessary, user and group ids are converted to user and
	     group names using the currently registered lookup functions
	     above.  This affects the file ownership fields and ACL values in
	     the struct archive_entry object.

     1marchive_read_close22m()
	     Does nothing for archive_read_disk handles.

     1marchive_read_finish22m()
	     This is a deprecated synonym for 1marchive_read_free22m().

     1marchive_read_free22m()
	     Invokes 1marchive_read_close22m() if it was not invoked manually, then
	     releases all resources.
     More information about the 4mstruct24m 4marchive24m object and the overall design
     of the library can be found in the libarchive(3) overview.

1mEXAMPLE0m
     The following illustrates basic usage of the library by showing how to
     use it to copy an item on disk into an archive.

	   void
	   file_to_archive(struct archive *a, const char *name)
	   {
	     char buff[8192];
	     size_t bytes_read;
	     struct archive *ard;
	     struct archive_entry *entry;
	     int fd;

	     ard = archive_read_disk_new();
	     archive_read_disk_set_standard_lookup(ard);
	     entry = archive_entry_new();
	     fd = open(name, O_RDONLY);
	     if (fd < 0)
		return;
	     archive_entry_copy_pathname(entry, name);
	     archive_read_disk_entry_from_file(ard, entry, fd, NULL);
	     archive_write_header(a, entry);
	     while ((bytes_read = read(fd, buff, sizeof(buff))) > 0)
	       archive_write_data(a, buff, bytes_read);
	     archive_write_finish_entry(a);
	     archive_read_free(ard);
	     archive_entry_free(entry);
	   }

1mRETURN VALUES0m
     Most functions return 1mARCHIVE_OK 22m(zero) on success, or one of several
     negative error codes for errors.  Specific error codes include:
     1mARCHIVE_RETRY 22mfor operations that might succeed if retried, 1mARCHIVE_WARN0m
     for unusual conditions that do not prevent further operations, and
     1mARCHIVE_FATAL 22mfor serious errors that make remaining operations impossi‐
     ble.

     1marchive_read_disk_new22m() returns a pointer to a newly-allocated struct
     archive object or NULL if the allocation failed for any reason.

     1marchive_read_disk_gname22m() and 1marchive_read_disk_uname22m() return const char
     * pointers to the textual name or NULL if the lookup failed for any rea‐
     son.  The returned pointer points to internal storage that may be reused
     on the next call to either of these functions; callers should copy the
     string if they need to continue accessing it.

1mERRORS0m
     Detailed error codes and textual descriptions are available from the
     1marchive_errno22m() and 1marchive_error_string22m() functions.

1mSEE ALSO0m
     archive_read(3), archive_util(3), archive_write(3),
     archive_write_disk(3), tar(1), libarchive(3)

1mHISTORY0m
     The 1mlibarchive 22mlibrary first appeared in FreeBSD 5.3.  The
     1marchive_read_disk 22minterface was added to 1mlibarchive 2.6 22mand first
     appeared in FreeBSD 8.0.

1mAUTHORS0m
     The 1mlibarchive 22mlibrary was written by Tim Kientzle
     <kientzle@FreeBSD.org>.

1mBUGS0m
     The “standard” user name and group name lookup functions are not the
     defaults because getgrgid(3) and getpwuid(3) are sometimes too large for
     particular applications.  The current design allows the application
     author to use a more compact implementation when appropriate.

     The full list of metadata read from disk by
     1marchive_read_disk_entry_from_file22m() is necessarily system-dependent.

     The 1marchive_read_disk_entry_from_file22m() function reads as much informa‐
     tion as it can from disk.	Some method should be provided to limit this
     so that clients who do not need ACLs, for instance, can avoid the extra
     work needed to look up such information.

     This API should provide a set of methods for walking a directory tree.
     That would make it a direct parallel of the archive_read(3) API.  When
     such methods are implemented, the “hybrid” symbolic link mode will make
     sense.

BSD			       December 30, 2016			   BSD
