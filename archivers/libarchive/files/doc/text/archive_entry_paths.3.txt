ARCHIVE_ENTRY_PATHS(3)	 BSD Library Functions Manual	ARCHIVE_ENTRY_PATHS(3)

1mNAME0m
     1marchive_entry_hardlink22m, 1marchive_entry_hardlink_w22m,
     1marchive_entry_set_hardlink22m, 1marchive_entry_copy_hardlink22m,
     1marchive_entry_copy_hardlink_w22m, 1marchve_entry_update_hardlink_utf822m,
     1marchive_entry_set_link22m, 1marchive_entry_copy_link22m,
     1marchive_entry_copy_link_w22m, 1marchve_entry_update_link_utf822m,
     1marchive_entry_pathname22m, 1marchive_entry_pathname_w22m,
     1marchive_entry_set_pathname22m, 1marchive_entry_copy_pathname22m,
     1marchive_entry_copy_pathname_w22m, 1marchve_entry_update_pathname_utf822m,
     1marchive_entry_sourcepath22m, 1marchive_entry_copy_sourcepath22m,
     1marchive_entry_symlink, archive_entry_symlink_w,0m
     1marchive_entry_set_symlink22m, 1marchive_entry_copy_symlink22m,
     1marchive_entry_copy_symlink_w22m, 1marchve_entry_update_symlink_utf8 22m— func‐
     tions for manipulating path names in archive entry descriptions

1mLIBRARY0m
     Streaming Archive Library (libarchive, -larchive)

1mSYNOPSIS0m
     1m#include <archive_entry.h>0m

     4mconst24m 4mchar24m 4m*0m
     1marchive_entry_hardlink22m(4mstruct24m 4marchive_entry24m 4m*a24m);

     4mconst24m 4mwchar_t24m 4m*0m
     1marchive_entry_hardlink_w22m(4mstruct24m 4marchive_entry24m 4m*a24m);

     4mvoid0m
     1marchive_entry_set_hardlink22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_copy_hardlink22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_copy_hardlink_w22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m, 4mwchar_t24m,
	 4m*path"24m);

     4mint0m
     1marchive_entry_update_hardlink_utf822m(4mstruct24m 4marchive_entry24m 4m*a24m,
	 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_set_link22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_copy_link22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_copy_link_w22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mwchar_t24m 4m*path24m);

     4mint0m
     1marchive_entry_update_link_utf822m(4mstruct24m 4marchive_entry24m 4m*a24m,
	 4mconst24m 4mchar24m 4m*path24m);

     4mconst24m 4mchar24m 4m*0m
     1marchive_entry_pathname22m(4mstruct24m 4marchive_entry24m 4m*a24m);

     4mconst24m 4mwchar_t24m 4m*0m
     1marchive_entry_pathname_w22m(4mstruct24m 4marchive_entry24m 4m*a24m);

     4mvoid0m
     1marchive_entry_set_pathname22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_copy_pathname22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_copy_pathname_w22m(4mstruct24m 4marchive_entry24m 4m*a24m,
	 4mconst24m 4mwchar_t24m 4m*path24m);

     4mint0m
     1marchive_entry_update_pathname_utf822m(4mstruct24m 4marchive_entry24m 4m*a24m,
	 4mconst24m 4mchar24m 4m*path24m);

     4mconst24m 4mchar24m 4m*0m
     1marchive_entry_sourcepath22m(4mstruct24m 4marchive_entry24m 4m*a24m);

     4mvoid0m
     1marchive_entry_copy_sourcepath22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mconst24m 4mchar24m 4m*0m
     1marchive_entry_symlink22m(4mstruct24m 4marchive_entry24m 4m*a24m);

     4mconst24m 4mwchar_t24m 4m*0m
     1marchive_entry_symlink_w22m(4mstruct24m 4marchive_entry24m 4m*a24m);

     4mvoid0m
     1marchive_entry_set_symlink22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_copy_symlink22m(4mstruct24m 4marchive_entry24m 4m*a24m, 4mconst24m 4mchar24m 4m*path24m);

     4mvoid0m
     1marchive_entry_copy_symlink_w22m(4mstruct24m 4marchive_entry24m 4m*a24m,
	 4mconst24m 4mwchar_t24m 4m*path24m);

     4mint0m
     1marchive_entry_update_symlink_utf822m(4mstruct24m 4marchive_entry24m 4m*a24m,
	 4mconst24m 4mchar24m 4m*path24m);

1mDESCRIPTION0m
     Path names supported by archive_entry(3):
     hardlink	 Destination of the hardlink.
     link	 Update only.  For a symlink, update the destination.  Other‐
		 wise, make the entry a hardlink and alter the destination for
		 that.
     pathname	 Path in the archive
     sourcepath  Path on the disk for use by archive_read_disk(3).
     symlink	 Destination of the symbolic link.

     Path names can be provided in one of three different ways:

     char *	Multibyte strings in the current locale.

     wchar_t *	Wide character strings in the current locale.  The accessor
		functions are named 1mXXX_w22m().

     UTF-8	Unicode strings encoded as UTF-8.  This are convience func‐
		tions to update both the multibyte and wide character strings
		at the same time.

     The sourcepath is a pure filesystem concept and never stored in an ar‐
     chive directly.

     For that reason, it is only available as multibyte string.  The link path
     is a convience function for conditionally setting hardlink or symlink
     destination.  It doesn't have a corresponding get accessor function.

     1marchive_entry_set_XXX22m() is an alias for 1marchive_entry_copy_XXX22m().

1mSEE ALSO0m
     archive_entry(3) libarchive(3),

BSD			       February 2, 2012 			   BSD
